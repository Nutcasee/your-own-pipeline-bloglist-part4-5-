{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","console","log","delete","Filter","props","value","searchPerson","onChange","handleSearchChange","PersonForm","onSubmit","addPerson","newName","handlePersonChange","newNumber","handleNumberChange","type","Persons","person","handleDelete","name","number","onClick","Notification","state","message","style","color","fontStyle","fontSize","background","borderStyle","borderSadius","padding","marginBottom","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchPerson","newMessage","setNewMessage","stateMessage","setStateMessage","useEffect","personService","initialPersons","length","handleNotification","setTimeout","personToShow","filter","toLowerCase","includes","event","target","preventDefault","samePerson","find","findPerson","window","confirm","changedPerson","returnedPerson","map","catch","error","concat","key","each","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1025dcbd.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nconst deletePerson = (id) => {\r\n  console.log('id is ', id)\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deletePerson }\r\n/*\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n}\r\n*/","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n  \r\n  return (\r\n    <div>\r\n      filter shown with \r\n      <input value={props.searchPerson} \r\n        onChange={props.handleSearchChange} \r\n      />\r\n    </div>\r\n  )\r\n  \r\n  /*\r\n  return (\r\n    <li>{note.content}</li>\r\n  )\r\n  */\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.addPerson}>\r\n        <div>\r\n          name: <input \r\n                  value={props.newName} \r\n                  onChange={props.handlePersonChange} />\r\n        </div>\r\n        <div>\r\n          number: <input \r\n                  value={props.newNumber} \r\n                  onChange={props.handleNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = ({ person, handleDelete }) => {\r\n  \r\n  return (\r\n    <div>\r\n      {person.name} {person.number}\r\n      <button onClick={handleDelete}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Notification = ({ state, message }) => {\r\n\r\n  const success = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16,\r\n    background: 'lightgreen',\r\n    borderStyle: 'solid',\r\n    borderSadius: 5,\r\n    padding: 8,\r\n    marginBottom: 8,\r\n  }\r\n\r\n  const error = {    \r\n    color: 'red',\r\n    background: 'lightgrey',\r\n    fontSize: 16,\r\n    fontStyle: 'italic',\r\n    borderStyle: 'solid',\r\n    borderSadius: 5,\r\n    padding: 8,\r\n    marginBottom: 8,\r\n  }\r\n\r\n\r\n  if (message === '') {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    (state) \r\n    ? \r\n    <div style={success}>\r\n      {message}\r\n    </div>\r\n    : \r\n    <div style={error}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport personService from './services/persons'\n\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  //state of filter input \n  const [ searchPerson, setSearchPerson ] = useState('')\n  //for Notification, two state\n  const [ newMessage, setNewMessage ] = useState('')\n  const [ stateMessage, setStateMessage ] = useState('')\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('initials persons ', initialPersons)\n        setPersons(initialPersons)\n      })\n  }, [])\n  console.log('render', persons.length, 'persons')\n\n  const addPerson = (event) => {\n    event.preventDefault()    \n    const samePerson = persons.find(findPerson => findPerson.name === newName)\n    \n    if (samePerson) {\n      //console.log('find person ', samePerson)\n      const id = samePerson.id\n      let message = `${newName} is already added to phonebook, replace the old number with a new one?`\n\n      //confirm to replace the old number... from the user\n      if (window.confirm(message)) {\n        const changedPerson = {...samePerson, number: newNumber}\n      \n      \n        personService\n          .update(samePerson.id, changedPerson)\n          .then(returnedPerson => {\n            console.log('returned person ', returnedPerson)\n            setPersons(persons.map(person => person.id !== id \n              ? person\n              : returnedPerson\n              ))\n            \n            handleNotification(true, `A number is changed for '${returnedPerson.name}'`) \n          })\n          .catch(error => {\n            handleNotification(false, error.response.data.error) \n            console.log(error.response.data)\n          })\n      }   \n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n  \n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          console.log('returned person ', returnedPerson)\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n\n          handleNotification(true, `Added '${returnedPerson.name}'`) \n        })\n        .catch(error => {\n          console.log('text data is: ', error.response.data)\n          handleNotification(false, error.response.data.error) \n          \n        })\n    }    \n  }\n\n  const handlePersonChange = (event) => {\n    //console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    //console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    //console.log(event.target.value)\n    setSearchPerson(event.target.value)\n  }\n\n  const handleNotification = (stateMessage, message) => {\n    setStateMessage(stateMessage) \n    setNewMessage(message)\n    setTimeout(() => {\n      setNewMessage('')\n      setStateMessage('') \n    }, 5000)\n  }\n\n  //filter array of person which has a name includes 'filters' input\n  const personToShow = persons\n    .filter(person => person.name\n      .toLowerCase()\n      .includes(searchPerson.toLowerCase()))\n\n  //console.log(personToShow)\n\n  const handleDelete = (person) => {\n    console.log('person id', person.id)\n    if (window.confirm(`Delete '${person.name}' ?`)) {\n      personService\n        .deletePerson(person.id) \n        .then(returnedPerson => {\n          console.log('returned person ', returnedPerson)\n          setPersons(persons.filter(each => each.id !== person.id))          \n        \n          handleNotification(true, `Person '${person.name}' was successfully removed from server`)\n        })\n        .catch(error => {\n          handleNotification(false, `Person '${person.name}' was already removed from server`)\n        })\n    } \n  }\n  //console.log(personToShow)  \n  //window.alert(message);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>      \n      \n      <Notification state={stateMessage} message={newMessage} />\n      <Filter searchPerson={searchPerson}\n        handleSearchChange={handleSearchChange}\n      />\n      {/*\n      <div>\n        filter shown with \n        <input value={searchPerson} \n          onChange={handleSearchChange} \n          />\n      </div>\n      */}  \n\n      <h2>add a new</h2>\n      \n      {/*\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input \n                  value={newName} \n                  onChange={handlePersonChange} />\n        </div>\n        <div>\n          number: <input \n                  value={newNumber} \n                  onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      */} \n      <PersonForm addPerson={addPerson}\n        newName={newName} handlePersonChange={handlePersonChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange}\n      />       \n\n      <h2>Numbers</h2>\n     \n      {personToShow.map(person =>\n        <Persons \n          key={person.name}\n          person={person}\n          handleDelete={() => handleDelete(person)} />\n      )}\n\n\n      {/*\n      {persons.map((person) => \n        <div key={person.name}>\n          <div>\n            {person.name} {person.number}\n          </div>\n        </div>\n      )}\n\n      {personToShow.map((person) => \n        <div key={person.name}>\n          <div>\n            {person.name} {person.number}\n          </div>\n        </div>\n      )}\n      */}\n\n      {/*<ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n        */}\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}